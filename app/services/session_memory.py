from app.services.game_recommend import game_recommendation
from app.db.models.enums import PhaseEnum, SenderEnum
from app.db.models.session import Session
from app.services.tone_engine import get_last_user_tone_from_session, tone_match_validator
import json
import openai
import os

openai.api_key = os.getenv("OPENAI_API_KEY")

# üéÆ Optional: Emojis for visual flavor (keep platform names raw)
PLATFORM_EMOJIS = {
    "PlayStation 5": "üéÆ",
    "PlayStation 4": "üéÆ",
    "PlayStation 3": "üéÆ",
    "PlayStation Vita": "üéÆ",
    "Xbox Series X|S": "üïπÔ∏è",
    "Xbox One": "üïπÔ∏è",
    "Xbox 360": "üïπÔ∏è",
    "Nintendo Switch": "üéÆ",
    "Nintendo Switch 2": "üéÆ",
    "Nintendo Wii U": "üéÆ",
    "Nintendo 3DS": "üéÆ",
    "New Nintendo 3DS": "üéÆ",
    "Meta Quest 2": "üï∂Ô∏è",
    "Oculus Quest": "üï∂Ô∏è",
    "Android": "üì±",
    "iPhone / iPod Touch": "üì±",
    "iPad": "üì±",
    "Macintosh": "üíª",
    "Windows": "üíª",
    "Linux": "üêß",
    "Web Browser": "üåê"
}

import random

VARIATION_LINES = [
    "Feels like a great match for your current vibe.",
    "This one fits your energy perfectly.",
    "Matches your style ‚Äî give it a shot!",
    "Vibe check passed ‚úÖ This one‚Äôs for you.",
    "Could be your next favorite ‚Äî want to try it?"
]

async def format_game_output(session, game: dict, user_context: dict = None) -> str:
    thrum_interactions = [i for i in session.interactions if i.sender == SenderEnum.Thrum]
    last_thrum_reply = thrum_interactions[-1].content if thrum_interactions else ""
    user_interactions = [i for i in session.interactions if i.sender == SenderEnum.User]
    last_user_reply = user_interactions[-1].content if user_interactions else ""
    # :speech_balloon: GPT prompt
    system_prompt = (
    "You are Thrum, a warm and playful game matchmaker. "
    "Your tone is cozy, human, and emoji-friendly. Never robotic. Never generic. "
    "Each reply should feel like part of a real conversation, suggesting a game only if it feels right, and asking a soft follow-up question. "
    "Don‚Äôt overwhelm with too much info‚Äîkeep it light, fun, and friendly. "
    "Use emojis if it matches the vibe, but keep it natural. "
    "Be concise, under 25 words. Never break character. "
    "Respond based on the user's tone, using short forms if they do."
)
    last_user_tone = get_last_user_tone_from_session(session)
    print("-------------------", last_user_tone)
    title = game.get("title", "Unknown Game")
    description = game.get("description", "")
    genre = game.get("genre", "")
    vibes = game.get("game_vibes", "")
    mechanics = game.get("mechanics", "")
    visual_style = game.get("visual_style", "")
    has_story = "has a story" if game.get("has_story") else "does not focus on story"
    platforms = game.get("platforms", [])
    # :brain: User context
    user_mood = user_context.get("mood") if user_context else None
    user_genre = user_context.get("genre") if user_context else None
    platform = user_context.get("platform") if user_context and user_context.get("platform") else (platforms[0] if platforms else None)
    # :dart: Determine if user's platform is supported
    not_prefered_platform = False
    fallback_platform = None
    if platform and platform not in platforms:
        not_prefered_platform = True
        fallback_platform = platforms[0] if platforms else "another platform"
    # :memo: User summary
    user_summary = ""
    if user_mood:
        user_summary += f"Mood: {user_mood}\n"
    if user_genre:
        user_summary += f"Preferred Genre: {user_genre}\n"
    if platform:
        user_summary += f"Platform: {platform}\n"
    # :jigsaw: Game trait summary
    trait_summary = f"""
Description: {description}
Genre: {genre}
Vibes: {vibes}
Mechanics: {mechanics}
Visual Style: {visual_style}
Story: {has_story}
""".strip()
    # :brain: Prompt
    prompt = f"""
The user‚Äôs tone is: {last_user_tone}
Match your reply style to this tone.
Don‚Äôt mention the tone itself ‚Äî just speak like someone who naturally talks this way.
You are Thrum ‚Äî a fast, confident game assistant.
The user is looking for a game with:
{user_summary.strip()}
You‚Äôre considering:
Game: {title}
{trait_summary}
not_prefered_platform = {not_prefered_platform}
Write exactly 3 lines:
1. Game title (bold using Markdown asterisks)
2. A strong half-line (10‚Äì12 words) explaining why it fits **this user‚Äôs vibe** use confident language and should sound like it is perfect fit for this user.
3. Platform line:
   - Only if not_prefered_platform is True, say:
     then make the message like "Not on {platform}, but available on {fallback_platform}" make the message proper
   - Otherwise just say:
    make the message like "you can find this game on {platform}" mentioned{platform} nothing else
Use 1‚Äì2 emojis. No links. No soft language like ‚Äúmaybe‚Äù or ‚Äúyou could‚Äù.
Just 3 bold, confident lines.
"""
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            temperature=0.4,
            messages=[{"role": "user", "content": prompt.strip()}]
        )
        reply = response["choices"][0]["message"]["content"].strip()
        return reply
    except Exception:
        if platform:
            if not_prefered_platform:
                platform_line = f"Not on your {platform}, but available on {fallback_platform} :video_game:"
            else:
                platform_line = f"Play it on your {platform} :video_game:"
        else:
            platform_line = "Search it online :video_game:"
        return f"**{title}**\nA good match for your vibe and preferences.\n{platform_line}"

async def deliver_game_immediately(db: Session, user, session) -> str:
    """
    Instantly delivers a game recommendation, skipping discovery.

    Returns:
        str: GPT-formatted game message
    """
    game, _ = await game_recommendation(db=db, user=user, session=session)

    if not game:
        return "Hmm, couldn't find a match right now. Try again soon!"
    else:
        session.last_recommended_game = game["title"]

        # Get user's preferred platform
        preferred_platforms = session.platform_preference or []
        user_platform = preferred_platforms[-1] if preferred_platforms else None
        game_platforms = game.get("platforms", [])

        # Build natural platform note
        if user_platform and user_platform in game_platforms:
            platform_note = f"It‚Äôs available on your preferred platform: {user_platform}."
        elif user_platform:
            available = ", ".join(game_platforms)
            platform_note = (
                f"It‚Äôs not on your usual platform ({user_platform}), "
                f"but is available on: {available}."
            )
        else:
            platform_note = f"Available on: {', '.join(game_platforms)}."

        # üß† Final Prompt
        user_prompt = (
            f"The user clearly asked for a game right away ‚Äî no questions, no delay.\n"
            f"Recommend: **{game['title']}**\n"
            f"Write a complete message (max 25 words) with:\n"
            f"‚Äì it must include The game title in bold using Markdown: **{game['title']}**\n"
            f"‚Äì A confident, punchy reason why this fits (based on genre, mechanics, story, or vibe)\n"
            f"‚Äì A natural mention of platform: {platform_note}\n"
            f"Use user_context if helpful, but don‚Äôt ask anything or recap.\n"
            f"Sound smooth, human, and excited ‚Äî this is a 'just drop it' moment."
            f"must suggest game with reason that why it fits to user"
        )

        return user_prompt


async def confirm_input_summary(session) -> str:
    last_user_tone = get_last_user_tone_from_session(session)

    """
    Uses gpt-4 to generate a short, human-sounding confirmation line from mood, genre, and platform.
    No game names or suggestions ‚Äî just a fun, natural acknowledgment.
    """
    mood = session.exit_mood or None
    genre_list = session.genre or []
    platform_list = session.platform_preference or []
    genre = genre_list[-1] if isinstance(genre_list, list) and genre_list else None
    platform = platform_list[-1] if isinstance(platform_list, list) and platform_list else None
    if not any([mood, genre, platform]):
        return "Got it ‚Äî let me find something for you."
    # Human tone prompt
    user_prompt = (
    f"Here‚Äôs what the user just shared:\n"
    f"‚Äì Mood: {mood or 'Not given'}\n"
    f"‚Äì Genre: {genre or 'Not given'}\n"
    f"‚Äì Platform: {platform or 'Not given'}\n\n"
    f"Write a short and charming confirmation message (max 12 words).\n"
    f"Use the values above to reflect their vibe and make them feel heard.\n"
    f"Don't suggest a game ‚Äî this is just a friendly check-in to say: 'I see you.'\n"
    f"Tone should feel natural, emotionally aware, and warmly human ‚Äî like a friend who gets them."
    )

    return user_prompt
    


class DiscoveryData:
    def __init__(self, mood=None, genre=None, platform=None, story_pref=None):
        self.mood = mood
        self.genre = genre
        self.platform = platform
        self.story_pref = story_pref

    def is_complete(self):
        return all([self.mood, self.genre, self.platform, self.story_pref])

    def to_dict(self):
        return {"mood": self.mood, "genre": self.genre, "platform": self.platform, "story_pref" : self.story_pref}



async def extract_discovery_signals(session) -> DiscoveryData:
    """
    Fetch mood, genre, and platform directly from the session table.
    This skips GPT classification and uses stored session values.
    """
    if not session:
        print("‚ùå Session not found.")
        return DiscoveryData()

    mood = session.exit_mood or session.entry_mood
    genre = session.genre[-1] if session.genre else None
    platform = session.platform_preference[-1] if session.platform_preference else None
    story_pref = session.story_preference

    print(f"üîç Extracted from session ‚Äî Mood: {mood}, Genre: {genre}, Platform: {platform}, story_preference : {story_pref}")
    return DiscoveryData(
        mood=mood,
        genre=genre,
        platform=platform,
        story_pref=story_pref,
    )

async def ask_discovery_question(session) -> str:
    """
    Dynamically generate a discovery question using gpt-4.
    Now adds freedom-language to each question (e.g. 'or something totally different?')
    """
    last_user_tone = get_last_user_tone_from_session(session)
    def get_last(arr):
        return arr[-1] if isinstance(arr, list) and arr else None
    
    if not session.genre:
        mood = session.exit_mood
        platform = get_last(session.platform_preference)
        user_promt = f"""
Speak entirely in the user's tone: {last_user_tone}.  
Use their style, energy, and attitude naturally. Do not describe or name the tone ‚Äî just talk like that.

Don‚Äôt mention the tone itself ‚Äî just speak like someone who naturally talks this way.
You're Thrum ‚Äî helping someone discover the perfect game.

You already know:
- Mood: {mood or "unknown"}
- Platform: {platform or "unknown"}

Ask ONE fun, casual question to find the user's **preferred game genre**.
ask question of 10-12 words only.
‚úÖ Mention a few examples: e.g. puzzle, action, life-sim, party chaos  
‚úÖ End with something like ‚Äúor something totally different?‚Äù  
‚úÖ Keep tone relaxed and expressive  
‚úÖ Use max one emoji  
‚ùå Don‚Äôt use greetings

üß† Example styles:
- Are you in the mood for platformers, chill sims, sneaky shooters ‚Äî or something totally different? üïπÔ∏è
- Puzzlers? Action? Party chaos? Or something totally offbeat?
- Looking for strategy, sports, role-playing‚Ä¶ or just whatever breaks the rules?
""".strip()

    elif not session.exit_mood:
        genre = get_last(session.genre)
        platform = get_last(session.platform_preference)
        user_promt = f"""
Speak entirely in the user's tone: {last_user_tone}.  
Use their style, energy, and attitude naturally. Do not describe or name the tone ‚Äî just talk like that.

Don‚Äôt mention the tone itself ‚Äî just speak like someone who naturally talks this way.
You're Thrum ‚Äî a playful, emotionally smart game assistant.

You already know:
- Genre: {genre or "unknown"}
- Platform: {platform or "unknown"}

Ask ONE friendly, expressive question to discover the user‚Äôs **current mood or emotional vibe**.
ask question of 10-12 words only.
‚úÖ Use casual, human language  
‚úÖ Mention some example moods (e.g. ‚Äúemotional‚Äù, ‚Äúcompetitive‚Äù, ‚Äúfunny‚Äù)  
‚úÖ Add a soft ending like ‚Äúor something totally different?‚Äù  
‚úÖ One emoji max  
‚ùå No greetings, no double questions

üß† Example styles:
- What mood are you in ‚Äî emotional, competitive, or funny? Or something totally different? üéÆ
- Feeling chill, chaotic, or in a story-rich kinda headspace‚Ä¶ or something else entirely?
- What‚Äôs the vibe today ‚Äî sneaky, calm, cozy? Or are we breaking all the molds?
""".strip()
        
    elif not session.platform_preference:
        mood = session.exit_mood
        genre = get_last(session.genre)
        user_promt = f"""
Speak entirely in the user's tone: {last_user_tone}.  
Use their style, energy, and attitude naturally. Do not describe or name the tone ‚Äî just talk like that.

Don‚Äôt mention the tone itself ‚Äî just speak like someone who naturally talks this way.
You're Thrum ‚Äî a fast, friendly game suggester.

You already know:
- Mood: {mood or "unknown"}
- Genre: {genre or "unknown"}

Ask ONE casual, human question to discover the **platform** the user prefers.
ask question of 10-12 words only.
‚úÖ Mention real examples: PS5, Switch, mobile, browser, VR  
‚úÖ Add a free-choice option like ‚Äúor something else entirely?‚Äù  
‚úÖ Use natural tone  
‚úÖ 1 emoji max  
‚ùå Never say hello or ask more than one question

üß† Example styles:
- Do you usually game on PlayStation, Switch, or mobile ‚Äî or something else entirely? üéÆ
- Is it Xbox, VR, mobile taps‚Ä¶ or some off-the-map setup?
- PS5 or Switch? Or do you roll with browser games and retro consoles?
""".strip()
        
    return user_promt

async def create_session_memory_bond(session, db: Session) -> str:
    """
    Creates a memory bond from the session interactions and preferences.
    Called during session closure to summarize key insights.
    """
    # Extract key session data
    interactions = session.interactions
    user_messages = [i for i in interactions if i.sender == SenderEnum.User]
    thrum_messages = [i for i in interactions if i.sender == SenderEnum.Thrum]
    
    # Build memory context
    memory_data = {
        "mood_progression": {
            "entry": session.entry_mood,
            "exit": session.exit_mood
        },
        "genre_preferences": session.genre,
        "platform_preferences": session.platform_preference,
        "story_preference": session.story_preference,
        "engagement_level": session.engagement_level,
        "recommended_games": [i.game_id for i in interactions if i.game_id],
        "interaction_count": len(interactions)
    }
    
    # Generate memory summary prompt
    memory_prompt = (
        f"Session Summary:\n"
        f"- Mood Journey: {memory_data['mood_progression']['entry']} ‚Üí {memory_data['mood_progression']['exit']}\n"
        f"- Preferred Genres: {', '.join(memory_data['genre_preferences']) if memory_data['genre_preferences'] else 'Not specified'}\n"
        f"- Platforms: {', '.join(memory_data['platform_preferences']) if memory_data['platform_preferences'] else 'Not specified'}\n"
        f"- Story Preference: {'Yes' if memory_data['story_preference'] else 'No' if memory_data['story_preference'] is not None else 'Not specified'}\n"
        f"- Engagement: {memory_data['engagement_level'] or 'Not measured'}\n"
        f"- Total Interactions: {memory_data['interaction_count']}"
    )
    
    # Store in session metadata
    if not session.meta_data:
        session.meta_data = {}
    session.meta_data["memory_bond"] = memory_data
    session.meta_data["memory_summary"] = memory_prompt
    
    db.commit()
    return memory_prompt